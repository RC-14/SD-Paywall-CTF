const fs = require('fs');
const path = require('path');
const http = require('http');

const config = {
	port: Number(process.env.PORT) || 8080,
	flagLength: Number(process.env.FLAG_LENGTH) || 15,
	fakes: Number(process.env.FAKES) || 9,
};

const flags = {};

const generateRandomChars = () => {
	return Math.random().toString(36).substring(2, 15);
}

const generateTokenFlagPair = () => {
	const token = generateRandomChars();

	let longBoi = generateRandomChars();
	for (let i = 0; i < config.flagLength; i++) {
		longBoi += generateRandomChars();
	}
	const flag = `flag{${longBoi}}`;

	flags[token] = flag;
	return [token, flag];
}

const generateFakeFlag = () => {
	const NOT_A_FLAG = 'NOT_A_FLAG';

	let longBoi = generateRandomChars();
	for (let i = 0; i < config.flagLength; i++) {
		longBoi += generateRandomChars();
	}

	return `flag{${NOT_A_FLAG + longBoi.substring(NOT_A_FLAG.length - 1)}}`;
}

const generateHtml = (token, flag) => {
	let html = fs.readFileSync(path.join(__dirname, 'public/index.html'), 'utf8');

	const flagLocation = Math.floor(Math.random() * config.fakes) + 1;

	let content = '';
	for (let i = 0; i < config.fakes + 1; i++) {
		content += `<div${i === flagLocation ? ' style="user-select: none; filter: blur(4px);"' : ''}>`

		const line = (i === flagLocation ? flag : generateFakeFlag()).split('');

		for (let j = 0; j < Math.floor(line.length / 2); j++) {
			content += '<p>';
			content += line.splice(0, Math.floor(Math.random() * Math.floor(line.length / 2))).join('');
			content += '</p>';
		}

		content += '<p>';
		content += line.join('');
		content += '</p>';

		content += '</div>';
	}

	html = html.replace('<!-- TO BE REPLACED: TOKEN -->', token);
	html = html.replace('<!-- TO BE REPLACED: CONTENT -->', content);

	return html;
}

// Simple HTTP server (99% generated by Github Copilot)
const server = http.createServer((req, res) => {
	console.log(`${req.method} ${req.url}`);

	const url = new URL('http://localhost:' + config.port + req.url);
	if (url.pathname === '/') {
		// Generate and send an html page
		const [token, flag] = generateTokenFlagPair();
		res.writeHead(200, { 'Content-Type': 'text/html' });
		res.end(generateHtml(token, flag));
	} else if (url.pathname === '/script.js') {
		// Send the script
		res.writeHead(200, { 'Content-Type': 'application/javascript' });
		res.end(fs.readFileSync(path.join(__dirname, 'public/script.js'), 'utf8'));
	} else if (url.pathname === '/style.css') {
		// Send the style
		res.writeHead(200, { 'Content-Type': 'text/css' });
		res.end(fs.readFileSync(path.join(__dirname, 'public/style.css'), 'utf8'));
	} else if (url.pathname === '/submit' && url.searchParams.has('token') && url.searchParams.has('flag')) {
		// Check if the flag is correct
		const token = url.searchParams.get('token');
		const flag = url.searchParams.get('flag');
		if (flags[token] === flag) {
			res.writeHead(200, { 'Content-Type': 'text/plain' });
			res.end();
		} else {
			res.writeHead(403, { 'Content-Type': 'text/plain' });
			res.end();
		}
	} else {
		// Send a 404
		res.writeHead(404, { 'Content-Type': 'text/plain' });
		res.end();
	}
});

server.listen(config.port);